filter {

  if [type] == "access" {
    grok {
      match => {
        "message" => '%{IPORHOST:first_ip}? %{COMBINEDAPACHELOG}'
      }
    }
    date {
      locale => "en"
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
      timezone => "America/Denver"
      target => ["@timestamp"]
      add_tag => [ "tmatch" ]
    }
    mutate {
      rename => [ "clientip", "varnish_ip"]
      rename => [ "first_ip", "client_ip"]
      convert => [ "bytes", "integer" ]
    }
    geoip {
        source => "client_ip"
    }
  } else if [type] == "error" {
    grok {
      match => {
        "message" => "\[%{DAY:day} (?<timestamp>%{MONTH:month} %{MONTHDAY} %{TIME} %{YEAR})\] \[%{WORD:class}\] \[%{WORD:originator} %{IP:clientip}\] %{GREEDYDATA:error_message}"
      }
      add_field => { "error_type" => "other" }
    }
    date {
      locale => "en"
      match => [ "timestamp" , "MMM dd HH:mm:ss yyyy" ]
      timezone => "America/Denver"
      target => ["@timestamp"]
      add_tag => [ "tmatch" ]
    }
    if [error_message] == "client denied by server configuration" {
      mutate {
        replace => { "error_type" => "Denied by Server Config" }
      }
    }
    if [error_message] == "File does not exist" {
      mutate {
        replace => { "error_type" => "File does not exist" }
      }
    }
    if [error_message] == "Maximum execution time of 30 seconds exceeded" {
      mutate {
        replace => { "error_type" => "Maximum execution time" }
      }
    }
    if [error_message] == "Attempt to serve directory" {
      mutate {
        replace => { "error_type" => "Attempt to serve directory" }
      }
    }
    if [error_message] == "Maximum number of allowable file uploads has been exceeded" {
      mutate {
        replace => { "error_type" => "Maximum number of file uploads" }
      }
    }
    if [error_message] == "Allowed memory size" or [error_message] == "bytes exhausted" {
      mutate {
        replace => { "error_type" => "Exhausted RAM" }
      }
    }
    if [error_message] == "not found or unable to stat" {
      mutate {
        replace => { "error_type" => "Unable to stat" }
      }
    }
    if [error_message] == "Exception thrown without a stack frame" {
      mutate {
        replace => { "error_type" => "Exception without stack frame" }
      }
    }
    if [error_message] == "Call to undefined function" {
      mutate {
        replace => { "error_type" => "Undefined function" }
      }
    }
    if [error_message] == "Invalid URI in request" {
      mutate {
        replace => { "error_type" => "Invalid URI" }
      }
    }
    if [error_message] == "Invalid method in request" {
      mutate {
        replace => { "error_type" => "Invalid method" }
      }
    }
    if [error_message] == "Failed opening required" {
      mutate {
        replace => { "error_type" => "Failed opening" }
      }
    }
  } else if [type] == "drupal_syslog" {
    grok {
      match => { "message" => '%{SYSLOGBASE} %{URI:drupal_base_url}\|%{INT:drupal_unix_timestamp}\|%{DATA:drupal_category}\|%{IP:ip}\|%{URI:drupal_request_url}\|(?:%{URI:drupal_referrer}|)\|%{INT:drupal_uid}\|(?:%{URI:drupal_link}|)\|%{GREEDYDATA:drupal_message}' }
    }
    mutate {
      gsub => [ "drupal_category", "\s", "_"]
      add_field => { "signal" => "signal" }
    }
    date {
      locale => "en"
      match => [ "timestamp" , "MMM dd HH:mm:ss" ]
      timezone => "America/Denver"
      target => ["@timestamp"]
      add_tag => [ "tmatch" ]
    }
    if [drupal_category] == "page_not_found" or [drupal_category] == "access_denied" or [drupal_category] == "linkchecker" {
      mutate {
        replace => { "signal" => "noise" }
      }
    }
    if [drupal_category] == "cron" and "Cron run completed" in [drupal_message] {
      mutate {
        replace => { "signal" => "noise" }
      }
    }
    if [drupal_category] == "job_scheduler" and "Finished processing scheduled jobs" in [drupal_message] and "0 failed" in [drupal_message] {
      mutate {
        replace => { "signal" => "noise"}
      }
    }
  } else if [type] == "drupal_authentication" {
    grok {
      match => { "message" => '%{SYSLOGBASE} %{URI:drupal_base_url}\|%{INT:drupal_unix_timestamp}\|%{DATA:drupal_category}\|%{IP:ip}\|%{URI:drupal_request_url}\|(?:%{URI:drupal_referrer}|)\|%{INT:drupal_uid}\|(?:%{URI:drupal_link}|)\|%{GREEDYDATA:drupal_message}' }
    }
    mutate {
      gsub => [ "drupal_category", "\s", "_"]
      add_field => { "signal" => "signal" }
    }
    date {
      locale => "en"
      match => [ "timestamp" , "MMM dd HH:mm:ss" ]
      timezone => "America/Denver"
      target => ["@timestamp"]
      add_tag => [ "tmatch" ]
    }
    if [drupal_category] == "user" {
      grok {
        match => { "drupal_message" => "(?<junk>^.*Session opened for) %{USERNAME:identikey_username}."}
      }
      mutate {
        remove_field => [ "junk" ]
      }
    }
    if [drupal_message] == "Login attempt failed" {
      mutate {
        add_field => { "auth_outcome" => "Fail" }
      }
    }
    if [drupal_message] == "Session opened for" {
      mutate {
        add_field => { "auth_outcome" => "Success" }
      }
    }
  } else if [type] == "varnishncsa" {
    grok {
      match => [
        "message",
        %{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:varnish_timestamp}\] %{WORD:verb} %{NOTSPACE:request} HTTP/%{NUMBER:httpversion} %{NUMBER:response} %{NUMBER:bytes} %{NOTSPACE:referrer} %{QS:agent} %{WORD:varnish_response} %{NOTSPACE:varnish_backend} %{NOTSPACE:varnish_f5_destination}"
      ]
    }
    mutate {
      convert => [ "bytes", "integer" ]
      add_field => { "signal" => "signal" }
    }
    if [agent] == "Pingdom.com_bot" {
      mutate {
        replace => { "signal" => "noise"}
      }
    }
    date{
      locale => "en"
      match =>["varnish_timestamp","dd/MM/yyyy:kk:mm:ss Z"]
      target => ["@timestamp"]
      add_tag => [ "tmatch" ]
    }
  } else if [logger] == "python-logstash-logger" {
    json {
      source => "message"
    }
  }
}
