input {
  #all access_log inputs listed here
  file {
    path => "/data/logs/web1/*_access_log"
    type => "web1_access"
  }
  file {
    path => "/data/logs/web2/*_access_log"
    type => "web2_access"
  }
  file {
    path => "/data/logs/web3/*_access_log"
    type => "web3_access"
  }
  file {
    path => "/data/logs/web4/*_access_log"
    type => "web4_access"
  }
  #All error_log inputs here
  file {
    path => "/data/logs/web1/*_error_log"
    type => "web1_error"
  }
  file {
    path => "/data/logs/web2/*_error_log"
    type => "web2_error"
  }
  file {
    path => "/data/logs/web3/*_error_log"
    type => "web3_error"
  }
  file {
    path => "/data/logs/web4/*_error_log"
    type => "web4_error"
  }
  #twitter
  twitter {
    consumer_key => "onZ1s1UOH2CNenkWkyif0O8NM"
    consumer_secret => "zf82dVpn9BEfbEq1ndEuMS8nByRZQnheUpxsKdRDqAeVL6NEPs"
    keywords => ["cuboulder", "beboulder"]
    oauth_token => "574683460-N6P3fz4Nm3jpCCW8fhFODOaRpQvLUr9FiR9iz6NO"
    oauth_token_secret => "3ZDKA7Ll5w1z5eKuADfHvaZYUsi2KwkSUXbEq48TtHVIz"
    type => "twitter"
    #full_tweet => true
  }
  #all syslog inputs listed here
  file {
    path => "/data/logs/web1/drupal.log"
    type => "web1_access"
  }
  file {
    path => "/data/logs/web2/drupal.log"
    type => "web2_access"
  }
  file {
    path => "/data/logs/web3/drupal.log"
    type => "web3_access"
  }
  file {
    path => "/data/logs/web4/drupal.log"
    type => "web4_access"
  }

}

filter {
  #set host based on type set in file input
  if "web1" in [type] {
    mutate { replace => [ "host", "web1" ] }
  } else if "web2" in [type] {
    mutate { replace => [ "host", "web2" ] }
  } else if "web3" in [type] {
    mutate { replace => [ "host", "web3" ] }
  } else if "web4" in [type] {
    mutate { replace => [ "host", "web4" ] }
  }
  #remove host info from type
  if "access" in [type] {
    mutate { replace => [ "type", "access" ] }
  } else if "error" in [type] {
    mutate { replace => [ "type", "error" ] }
  }
  #parse log items based on type
  if [type] == "access" {
    grok {
      match => { "message" => '%{IPORHOST:clientip} %{IPORHOST:varniship} %{USER:ident} %{NOTSPACE:auth} \[%{HTTPDATE:timestamp}\] "(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})" %{NUMBER:response} (?:%{NUMBER:bytes}|-)' }
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
  } else if [type] == "error" {
    grok {
      match => { 
        "message" => "\[(?<timestamp>%{DAY:day} %{MONTH:month} %{MONTHDAY} %{TIME} %{YEAR})\] \[%{WORD:class}\] \[%{WORD:originator} %{IP:clientip}\] %{GREEDYDATA:errmsg}" 
      }
    }
  } else if [type] == "twitter" {
    if [message] =~ /cuboulder/ {
      mutate {
        add_tag => [ "cuboulder" ]
      }
    }
    if [message] =~ /beboulder/ {
      mutate {
        add_tag => [ "beboulder" ]
      }
    }
  } else if [type] == "syslog" {
    grok {
      match => { "message" => '%{SYSLOGBASE} %{URI:base_url}\|%{INT:unix_timestamp}\|%{WORD:category}\|%{IP:ip}\|%{URI:request_url}\|%{URI:referrer}\|%{INT:uid}\|\|%{GREEDYDATA:errmsg}' }
    }
    date {
      match => [ "timestamp" , "MMM dd HH:mm:ss" ]
    }
  }
}

output {
  elasticsearch { host => localhost }
  stdout { codec => rubydebug }
  if [type] == 'twitter' {
    elasticsearch {
      embedded => true
    }
  }
}
