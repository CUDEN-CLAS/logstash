filter {
  if [type] == "error" {
    grok {
      match => {
        "message" => "\[%{DAY:day} (?<timestamp>%{MONTH:month} %{MONTHDAY} %{TIME} %{YEAR})\] \[%{WORD:class}\] \[%{WORD:originator} %{IP:clientip}\] %{GREEDYDATA:error_message}"
      }
      add_field => { "error_type" => "other" }
    }
    date {
      locale => "en"
      match => [ "timestamp" , "MMM dd HH:mm:ss yyyy" ]
      timezone => "America/Denver"
      target => ["@timestamp"]
      add_tag => [ "tmatch" ]
    }
    if [error_message] == "client denied by server configuration" {
      mutate {
        replace => { "error_type" => "Denied by Server Config" }
      }
    }
    if [error_message] == "File does not exist" {
      mutate {
        replace => { "error_type" => "File does not exist" }
      }
    }
    if [error_message] == "Maximum execution time of 30 seconds exceeded" {
      mutate {
        replace => { "error_type" => "Maximum execution time" }
      }
    }
    if [error_message] == "Attempt to serve directory" {
      mutate {
        replace => { "error_type" => "Attempt to serve directory" }
      }
    }
    if [error_message] == "Maximum number of allowable file uploads has been exceeded" {
      mutate {
        replace => { "error_type" => "Maximum number of file uploads" }
      }
    }
    if [error_message] == "Allowed memory size" or [error_message] == "bytes exhausted" {
      mutate {
        replace => { "error_type" => "Exhausted RAM" }
      }
    }
    if [error_message] == "not found or unable to stat" {
      mutate {
        replace => { "error_type" => "Unable to stat" }
      }
    }
    if [error_message] == "Exception thrown without a stack frame" {
      mutate {
        replace => { "error_type" => "Exception without stack frame" }
      }
    }
    if [error_message] == "Call to undefined function" {
      mutate {
        replace => { "error_type" => "Undefined function" }
      }
    }
    if [error_message] == "Invalid URI in request" {
      mutate {
        replace => { "error_type" => "Invalid URI" }
      }
    }
    if [error_message] == "Invalid method in request" {
      mutate {
        replace => { "error_type" => "Invalid method" }
      }
    }
    if [error_message] == "Failed opening required" {
      mutate {
        replace => { "error_type" => "Failed opening" }
      }
    }
  }
}
